#!/usr/bin/env python3

import argparse
import yaml

ocre_msg_file_template = """\

/**
 * @copyright Copyright Â© contributors to Project Ocre,
 * which has been established as Project Ocre a Series of LF Projects, LLC
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * @file messages.h
 *
 * @details This file contains all message types that components may send to one another.
 * DO NOT EDIT THIS FILE.  The file is auto-generated at build-time.
 * 
 * How to add messages:
 *   1. Define message types in the component, for example, components/your-component/message_types.h
 *   2. Create a <component-name>.yaml definition that maps your message type to a message name
 *   3. Build! You can now use the message types in the component implementation
 */

#ifndef OCRE_MESSAGES_H_G
#define OCRE_MESSAGES_H_G

#include <stdint.h>

#include <messaging/message_types.h>
{includes}

struct base_msg {{
  int msg_id;
  int *from;
  struct base msg;
}};

{message_wrappers}

{ocre_message}

#endif"""

component_message_type_includes_template = """\
#include <components/{component}/message_types.h>
"""

msg_wrapper_template = """
struct {message_name} {{
  int msg_id;
  int *from;
  struct {message_type} msg;
}};
"""

ocre_message = """\
struct ocre_message {{
  uint32_t event;
  uint32_t containerId;
  union {{
{message_unions}
  }} components;
}};"""

msg_union_template = """\
    union {{
{messages}
      struct base_msg base_msg;
    }} {component};
"""

msg_union_member_template = """\
      struct {message_name} {message_name};
"""

def automsg(infiles, outfile):
    wrapped_messages = set()
    unioned_component = set()
    component_message_type_includes = set()
    
    for filepath in infiles:
        with open(filepath, 'r') as f:
            messages = yaml.safe_load(f)

        component = messages['component']
        unioned_messages = set()

        component_message_type_includes.add(component_message_type_includes_template.format(component=component))

        for event in messages['events']:
            name = "{}_msg".format(event['type'])
            type = event['type']

            wrapped_messages.add(msg_wrapper_template.format(message_name=name, message_type=type))
            unioned_messages.add(msg_union_member_template.format(message_name=name))
        unioned_component.add(msg_union_template.format(component=component, messages=''.join(unioned_messages).strip('\n')))   
    
    ocre_msg = ocre_message.format(message_unions=''.join(unioned_component).strip('\n'))

    ocre_msg_file = ocre_msg_file_template.format(
        includes=''.join(component_message_type_includes).strip('\n'),
        message_wrappers=''.join(wrapped_messages).strip('\n'), 
        ocre_message=ocre_msg)

    with open(outfile, 'w') as f:
        f.write(ocre_msg_file)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("infiles", nargs='+')
    parser.add_argument("outfile", type=str)
    args = parser.parse_args()

    automsg(args.infiles, args.outfile)
  